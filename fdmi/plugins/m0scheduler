#!/usr/bin/env python3
#
# Copyright (c) 2021 Seagate Technology LLC and/or its Affiliates
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# For any questions about this software or licensing,
# please email opensource@seagate.com or cortx-questions@seagate.com.
#

# This is FDMI plugin sample app wrapper that serves as a scheduler
# for the FDMI records. It gathers that cluster infp using Hare hctl
# tool, forks m0sched program and waits for records delivered by it.
# For now it is just a demo that prints FDMI records to console, but
# later it can perform records de-dup and replication coordination by
# means of set of the replication python programs that perform actual
# data move.

import subprocess
import signal
import shlex
import sys
import json
import codecs

cluster_info = dict()  # global cluster info
kv_records = []        # global kv cache
processes = []         # global list if m0sched processes


def str_decode(encoded):
    if encoded is None:
        return None
    if encoded == '0':
        return encoded
    # return codecs.decode(encoded, 'hex').decode('utf-8')
    return codecs.decode(encoded, 'hex')


def json_parser(kv_record):
    kvs = json.loads(kv_record)
    fid = str_decode(kvs.get('fid'))
    if fid is None:
        print('Invalid fid in kv_record {}'.format(kv_record), file=sys.stderr)
        return
    cr_key = str_decode(kvs.get('cr_key'))
    if cr_key is None:
        print('Invalid cr_key in kv_record {}'.format(kv_record), file=sys.stderr)
        return
    cr_val = str_decode(kvs.get('cr_val'))
    if cr_val is None:
        print('Invalid cr_val in kv_record {}'.format(kv_record), file=sys.stderr)
        return
    kv = {
        'fid': fid,
        'cr_key': cr_key,
        'cr_val': cr_val
    }
    # kv = {'fid': kvs["fid"], 'cr_key': kvs["cr_key"], 'cr_val': kvs["cr_val"]}
    flag = True

    # check dedup records
    for kv_i in kv_records:
        if kv['cr_key'] == kv_i['cr_key'] and kv['cr_val'] != "0":
            # print(kv_records)
            print('dedup: {} {}'.format(kv_i, kv), file=sys.stderr)
            flag = False
            break

    # if record is not dedupable, add to cache
    if flag and kv['cr_val'] != "0":
        print('new kv: {}'.format(kv), file=sys.stderr)
        kv_records.append(kv)


# handle SIGNT and SIGTERM
def signal_handler(sig, frame):
    print('CTRL + C pressed', file=sys.stderr)
    print('Stopping all m0sched processes...')
    for p in processes:
        p.send_signal(sig)
        p.wait()

    # print(kv_records)
    sys.exit(0)


def execute_command_and_get_output(cmd):
    proc = subprocess.Popen(cmd, stdin=subprocess.PIPE,
                            stdout=subprocess.PIPE,
                            stderr=subprocess.PIPE,
                            shell=True)
    stdout, stderr = proc.communicate()
    output_var = str(stdout, 'utf-8')
    return output_var


# m0sched -l 192.168.52.53@tcp:12345:4:1 -h 192.168.52.53@tcp:12345:1:1 -p 0x7000000000000001:0x37
# -f 0x7200000000000001:0x19
def get_scheduler_cmd(args):
    # m0sched = "/home/931442/cortx-motr/fdmi/plugins/m0sched"
    m0sched = args.scheduler_path
    opts = " -l " + cluster_info['local_endpoint'] + " -h " + cluster_info['ha_endpoint'] + \
           " -p " + cluster_info['profile_fid'] + " -f " + cluster_info['process_fid'] + " -g " + \
           cluster_info['fdmi_filter_fid']
    return m0sched + opts


# get local ep, ha ep, profile fid and process fid
def get_cluster_info(args):
    info = dict()
    cmd = '{} status --json'.format(args.hctl_path)
    output = execute_command_and_get_output(cmd)
    if output is None:
        print('Failed to execute {}. Please make sure the path to '
              '{} is correct'.format(cmd, args.hctl_path), file=sys.stderr)
        return None
    cluster_js = json.loads(output)
    if cluster_js is None:
        print('Failed to fetch cluster info.', file=sys.stderr)
        return None

    profiles = cluster_js.get('profiles')
    if profiles is None or len(profiles) == 0:
        print('Failed to fetch profiles from cluster info:\n{}'.format(cluster_js), file=sys.stderr)
        return None

    profile_fid = str(profiles[0].get('fid'))
    if profile_fid is None or len(profile_fid) == 0:
        print('Failed to fetch profiles[0]/fid from cluster info:\n{}'.format(cluster_js), file=sys.stderr)
        return None
    info['profile_fid'] = profile_fid

    nodes_data = cluster_js.get('nodes')
    if nodes_data is None or len(nodes_data) == 0:
        print('Failed to fetch nodes from cluster info:\n{}'.format(cluster_js), file=sys.stderr)
        return None
    services = nodes_data[0].get('svcs')
    if services is None or len(services) == 0:
        print('Failed to fetch nodes/svcs from cluster info:\n{}'.format(cluster_js), file=sys.stderr)
        return None

    for svc in services:
        if svc['name'] == 'hax':
            ha_endpoint = str(svc.get('ep'))
            if ha_endpoint is None or len(ha_endpoint) == 0:
                print('Invalid nodes/svcs/hax/ep in cluster info:\n{}'.format(cluster_js), file=sys.stderr)
                return None
            info['ha_endpoint'] = ha_endpoint

        svc_name = str(svc.get('name'))
        if svc_name is None or len(svc_name) == 0:
            print('Invalid nodes/svcs/name in cluster info:\n{}'.format(cluster_js), file=sys.stderr)
            return None

        # m0sched alway uses first m0client
        if svc_name == 'm0_client':
            local_endpoint = str(svc.get('ep'))
            if local_endpoint is None or len(local_endpoint) == 0:
                print('Invalid nodes/svcs/m0_client/ep in cluster info:\n{}'.format(cluster_js),
                      file=sys.stderr)
                return None
            info['local_endpoint'] = local_endpoint

            process_fid = str(svc.get('fid'))
            if process_fid is None or len(process_fid) == 0:
                print('Invalid nodes/svcs/m0_client/fid in cluster info:\n{}'.format(cluster_js),
                      file=sys.stderr)
                return None
            info['process_fid'] = process_fid
            break

    if args.filter_id is None:
        with open(args.config_path) as f:
            for s in f.readlines():
                # example: ' {0x6c| ((^l|1:81), 2, ^l|1:81, "", ^n|1:3, ^v|1:66, [1: "Bucket-Name"],
                # [1: "192.168.12.2@tcp:12345:4:1"])},'
                if s.startswith(' {0x6c| ((^l|'):
                    s = s[15:]
                    s = s[:s.index(')')]
                    fdmi_filter_fid = f"0x6c00000000000001:{int(s):#x}"
                    info['fdmi_filter_fid'] = fdmi_filter_fid
                    break
    else:
        info['fdmi_filter_fid'] = args.filter_id

    if info.get('ha_endpoint') is None:
        print('Failed to get Hare endpoint from the cluster info.', file=sys.stderr)
        return None
    if info.get('process_fid') is None:
        print('Failed to get client process fid from the cluster info.', file=sys.stderr)
        return None
    if info.get('local_endpoint') is None:
        print('Failed to get local client endpoint from the cluster info.', file=sys.stderr)
        return None
    if info.get('fdmi_filter_fid') is None:
        print('Failed to get fdmi filter id from the cluster config.', file=sys.stderr)
        return None

    print('  {}'.format(info), file=sys.stderr)
    return info


def listen_on_command(command):
    global processes
    p = subprocess.Popen(shlex.split(command), stdin=subprocess.PIPE,
                         stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    if p is None:
        print('Failed to run {}'.format(command), file=sys.stderr)
        return -1
    processes.append(p)

    print('Listening for FDMI events on:\n  {}'.format(command), file=sys.stderr)
    while True:
        output, error = p.communicate()
        if output is not None:
            fid = "fid"
            record = output.decode("utf-8")
            if fid in record:
                json_parser(record)

        rc = p.poll()
        if rc is not None:
            print('Exiting because m0sched exited with:', file=sys.stderr)
            print('  error code = {}'.format(rc), file=sys.stderr)
            if error is not None:
                error = error.decode('utf-8')
            if error is not None and len(error) > 0:
                print('  error text = {}'.format(error), file=sys.stderr)
            break

    return p.poll()


def main(args):
    global cluster_info

    einval = 22
    if args.config_path is None and args.filter_id is None:
        print('One of two --config-path or --filter-id is required.', file=sys.stderr)
        sys.exit(einval)

    print('Using the following settings:', file=sys.stderr)
    print('  scheduler-path = {}'.format(args.scheduler_path), file=sys.stderr)
    print('  hctl-path = {}'.format(args.hctl_path), file=sys.stderr)

    config_path = args.config_path
    if config_path is None:
        config_path = 'using filter-id'
    print('  config-path = {}'.format(config_path), file=sys.stderr)

    filter_id = args.filter_id
    if filter_id is None:
        filter_id = 'using config-path'
    print('  filter-id = {}'.format(filter_id), file=sys.stderr)

    print('Register SIGINT signal handler', file=sys.stderr)
    signal.signal(signal.SIGINT, signal_handler)

    print('Cluster info:', file=sys.stderr)
    cluster_info = get_cluster_info(args)
    if cluster_info is None:
        sys.exit(einval)

    # Execute m0sched with cluster info in loop and wait for
    # metadata in the records.
    listen_on_command(get_scheduler_cmd(args))


if __name__ == '__main__':
    import argparse

    ap = argparse.ArgumentParser(description=__doc__)
    ap.add_argument('-sp', '--scheduler-path', required=False, help='path to m0sched executable',
                    type=str, default='./m0sched')
    ap.add_argument('-hp', '--hctl-path', required=False, help='path to hctl executable',
                    type=str, default='hctl')
    ap.add_argument('-cp', '--config-path', required=False, help='path to confd.xc file',
                    type=str, default='/etc/motr/confd.xc')
    ap.add_argument('-fi', '--filter-id', required=False, help='plugin filter id',
                    type=str)
    main(ap.parse_args())
